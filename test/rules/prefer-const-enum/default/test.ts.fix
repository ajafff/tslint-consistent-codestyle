const enum Empty {}

const enum Foo {
    bar,
    baz,
}
bar = Foo.bar;
baz = Foo['baz'];
let f: Foo;
let b: Foo.bar;

const enum Foo {
    foo = 2,
}

enum Foo2 {
    bar,
    baz = foo,
}

enum Foo2 {
    foo = 3,
}

const enum Bar {
    foo = 1,
    bar = 1 + 1,
    baz = 1 << 1,
}

const enum ConstBar {
}

const enum Baz {
    'foo',
    bar = foo,
    ['baz'] = Baz.bar,
    bas = Baz['baz'],
    quux = bas + Baz.baz | Baz['foo'] + ~~bar & (Foo.bar - Foo2.bar),
}

enum Baz2 {
    foo = Foo2.baz,
}

enum Bas {
    foo,
}

enum Bas2 {
    foo = Bas[foo],
}

export enum ExportedEnum {}

const enum Split {
    Foo,
    Bar,
}

const enum Split {
    Baz = Foo,
}

enum NumberAccess {
    Foo,
}
NumberAccess[0];

enum Assigned {}
foo = Assigned;

enum TemplateAccess {
    Bar,
}
foo = TemplateAccess[`Bar`];

enum Parameter {}
foo(Parameter);

enum Paren {
    Bar,
    Baz = (Paren).Bar,
}

enum Paren2 {
    Bar,
}
foo = (Paren2).Bar;

enum Exported {}
export {Exported};

const enum StringValued {
    Foo = "FOO",
    Bar = 'Bar',
    Baz = Foo,
}

const enum Mixed {
    foo = StringValued.Foo,
    bar = Foo.bar,
}

enum TypeOf {}
let t: typeof TypeOf;

enum TypeOfMember {
    member,
}
let m: typeof TypeOfMember.member;

enum NonConst {
    foo = "foo",
    bar = `foo = ${foo}`,
}

